/*
    用来快速分析样本的yara规则
*/


import "pe"

/*
在所有可执行区段搜索syscall + ret指令
*/
rule sure_syscall 
{
    meta:
        author = "sbb"
    strings:
        // 代替方法
        // llvm-objdump.exe --disassemble -M intel [文件路径] | Select-String "syscall"
        $a = { 0F 05 [0-5] C3 }  //syscall xxx xxx ret 
    condition:
        pe.is_pe and
        for any section in pe.sections:
        (section.characteristics & pe.SECTION_CNT_CODE and $a in (section.raw_data_offset..section.raw_data_offset + section.raw_data_size))
}

rule get_dll_base_with_shellcode_32bit_pe     
{
    meta:
        author = "sbb"
    strings:
        $a = { ?? ?? ?? 30 00 00 00 [0-10] 0C }  
    condition:
        pe.is_32bit() and
        for any section in pe.sections: ($a in (section.raw_data_offset..section.raw_data_offset + section.raw_data_size))
}

rule get_dll_base_with_shellcode_64bit_pe
{
    meta:
        author = "sbb"
    strings:
        $a = { ?? ?? ?? ?? ?? 60 00 00 00 [0-10] 18}  
    condition:
        pe.is_64bit() and
        for any section in pe.sections: ($a in (section.raw_data_offset..section.raw_data_offset + section.raw_data_size))
}


// pe文件里还包含着其他pe文件(文件落地)
rule carved_pefiles
{
    meta:
        author = "sbb"
    strings:
        $a = {4D 5A 90 00 03 00 00 00 04 00 00 00 FF FF 00 00}
    condition:
        pe.is_pe and
        for any section in pe.sections: ($a in (section.raw_data_offset..section.raw_data_offset + section.raw_data_size))
}